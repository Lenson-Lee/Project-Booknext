import { useEffect, useState } from "react";
import { InAuthUser } from "@/models/in_auth_user";
import { GoogleAuthProvider, signInWithPopup, User } from "firebase/auth";
import FirebaseClient from "@/models/firebase_client";

import { useSession } from "next-auth/react";
export default function useNextAuth() {
  //Auth User Í∞íÏùÑ Î∞òÌôò
  const { data: session } = useSession();

  const [authUser, setAuthUser] = useState<InAuthUser | null>(null);
  const [loading, setLoading] = useState(true);

  async function signInNextAuth(): Promise<void> {
    //index.tsxÏùò Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäºÏóêÏÑúÎäî promiseÎ•º ÏÇ¨Ïö©ÌñàÍ∏∞ ÎïåÎ¨∏Ïóê then/catch Î•º ÏÇ¨Ïö©ÌñàÏßÄÎßå
    //Ïó¨Í∏∞ÏÑúÎäî Î∞îÎ°ú async/awaitÎ•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÎïåÎ¨∏Ïóê try/catch ÏÇ¨Ïö©

    //Íµ¨Í∏ÄÍ≥º Îã§Î•¥Í≤å join„Öç „ÖîÏù¥ÏßÄÏóêÏÑú Î∞îÎ°ú ÌÜµÏã† Îì§Ïñ¥Í∞Ä„Öó„ÑπÍ≤åÏöî
    //api -> members.add ÏóêÏÑú method : POST ÏÑ§Ï†ï ÌõÑ Ïª®ÌãÄÌôÄÎü¨Î°ú Ïù¥Îèô
    // member.ctrl.addÏóêÏÑú Ï§ëÎ≥µ Í≥ÑÏ†ï ÌôïÏù∏ ÌõÑ member.modelÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    //ÏµúÏ¢ÖÏ†ÅÏù∏ ÌååÏù¥Ïñ¥Î≤†Ïù¥Ïä§ Ï†ÄÏû•ÏùÄ Î©§Î≤ÑÎ™®Îç∏ÏóêÏÑú Ïã§Ìñâ
    //modelÏóêÏÑú DBÏóê Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ ÌõÑ Ï∂îÍ∞ÄÌïúÎã§. Í∑ºÎç∞ Ïö∞Î¶¨ÎèÑ ÌååÏù¥Ïñ¥Î∞∞Ïù¥Ïä§Ïóê ÎÑ£ÏúºÎãàÍπå
    //Î™®Îç∏ÏùÄ ÏÇ¨Ïö©Ìï¥ÎèÑ Îê†ÎìØ!

    //Í∑∏Î¶¨Í≥† next-authÎäî sessionÏùÑ Ïù¥Ïö©Ìï¥ÏÑú ÏÑ∏ÏÖòÌîÑÎ°úÎ∞îÏù¥ÎçîÎ•º ÎßåÎì§Ïñ¥ÎëêÏóàÎã§
    try {
      const signInResult = session ? session.user : null;

      if (session) {
        console.info("ü§¶‚Äç‚ôÄÔ∏èÏÑ∏ÏÖò Îì§Ïñ¥ÏôîÏúºÎãà members.add apiÎ°ú Í∞àÍ≤åÏöî");
        console.info(session);

        //ÌååÏù¥Ïñ¥Î≤†Ïù¥Ïä§ add
        const resp = await fetch("/api/members.add", {
          method: "post",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            uid: "sampleUserID",
            email: session?.user.email ? session.user.email : "test",
            displayName: session ? "sample.name" : "Ïù¥Î¶ÑÏù¥ ÏóÜÏùÑ ÏàòÍ∞Ä ÏûàÎÇòÏöî",
            photoURL: "sample.photo",
          }),
        });

        console.info({ status: resp.status });
        const respData = await resp.json();
        console.info(respData);
      }
    } catch (err) {
      console.error(err);
    }
  }

  /** Î°úÍ∑∏ÏïÑÏõÉ > Î™®Îì†Í±∏ Ï¥àÍ∏∞Ìôî */
  const clear = () => {
    setLoading(true);
  };
  const signOut = () => FirebaseClient.getInstance().Auth.signOut().then(clear);

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏùÑ Îïå(Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏùÑÎïåÎäî ÎπÑÏö∞Í≥† Ï¢ÖÎ£å)
  const AuthStateChanged = async (authState: User | null) => {
    if (authState === null) {
      // setAuthUser(null);
      setLoading(false);
      return;
    }
    setLoading(true);
    // setAuthUser({
    //   uid: authState.uid,
    //   email: authState.email,
    //   photoURL: authState.photoURL,
    //   displayName: authState.displayName,
    // });
    setLoading(false);
  };

  // Î°úÍ∑∏Ïù∏ÏùÑ ÌïòÍ≥† ÎÇòÎ©¥ Ï†ïÎ≥¥Î≥ÄÍ≤ΩÏãúÏ†êÏóê Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÎÇº Ïàò ÏûàÏùå
  useEffect(() => {
    const unsubscribe =
      FirebaseClient.getInstance().Auth.onAuthStateChanged(AuthStateChanged);
    return () => unsubscribe();
  }, []);

  return {
    // authUser,
    loading,
    signOut,
  };
}
